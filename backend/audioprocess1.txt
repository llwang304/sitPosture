import websocket
import datetime
import hashlib
import base64
import hmac
import json
from urllib.parse import urlencode
import time
import ssl
from wsgiref.handlers import format_date_time
from datetime import datetime
from time import mktime
import _thread as thread
import subprocess
import os
from dotenv import load_dotenv

load_dotenv()
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
APPID = os.getenv("APPID")
APISecret = os.getenv("APISecret")
APIKey = os.getenv("APIKey")


class Ws_Param(object):
    def __init__(self, Text):
        self.APPID = APPID
        self.APIKey = APIKey
        self.APISecret = APISecret
        self.Text = Text

        self.CommonArgs = {"app_id": self.APPID}
        self.BusinessArgs = {"aue": "raw", "auf": "audio/L16;rate=16000", "vcn": "xiaoyan", "tte": "utf8"}
        self.Data = {"status": 2, "text": str(base64.b64encode(self.Text.encode('utf-8')), "UTF8")}

    def create_url(self):
        url = 'wss://tts-api.xfyun.cn/v2/tts'
        now = datetime.now()
        date = format_date_time(mktime(now.timetuple()))

        signature_origin = "host: " + "ws-api.xfyun.cn" + "\n"
        signature_origin += "date: " + date + "\n"
        signature_origin += "GET " + "/v2/tts " + "HTTP/1.1"

        signature_sha = hmac.new(self.APISecret.encode('utf-8'), signature_origin.encode('utf-8'), digestmod=hashlib.sha256).digest()
        signature_sha = base64.b64encode(signature_sha).decode(encoding='utf-8')

        authorization_origin = "api_key=\"%s\", algorithm=\"%s\", headers=\"%s\", signature=\"%s\"" % (self.APIKey, "hmac-sha256", "host date request-line", signature_sha)
        authorization = base64.b64encode(authorization_origin.encode('utf-8')).decode(encoding='utf-8')

        v = {
            "authorization": authorization,
            "date": date,
            "host": "ws-api.xfyun.cn"
        }
        return url + '?' + urlencode(v)


def pcm_to_wav(pcm_data, sample_rate=16000, channels=1, sample_width=2):
    """将 PCM 数据转换为 WAV 格式."""
    command = [
        'ffmpeg',
        '-f', 's16le',
        '-ar', str(sample_rate),
        '-ac', str(channels),
        '-i', '-',
        '-acodec', 'pcm_s16le',
        '-f', 'wav',
        '-'
    ]
    process = subprocess.Popen(command, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate(input=pcm_data)
    if process.returncode != 0:
        print(f"ffmpeg error: {stderr.decode()}")
        return None
    return stdout


def process_audio(text, emit_func):
    wsParam = Ws_Param(text)
    wsUrl = wsParam.create_url()

    def on_message(ws, message):
        try:
            message = json.loads(message)
            code = message["code"]
            sid = message["sid"]
            audio = message["data"]["audio"]
            audio = base64.b64decode(audio)
            status = message["data"]["status"]
            if status == 2:
                ws.close()
            if code != 0:
                errMsg = message["message"]
                print("sid:%s call error:%s code is:%s" % (sid, errMsg, code))
            else:
                wav_data = pcm_to_wav(audio)  # 将 PCM 转换为 WAV
                with open('./test.wav', 'ab') as f:
                    f.write(wav_data)
                if wav_data:
                    emit_func(audio)  # 发送 WAV 数据
                # emit_func(audio) # 发送音频数据

        except Exception as e:
            print("receive msg,but parse exception:", e)

    def on_error(ws, error):
        print("### error:", error)

    def on_close(ws):
        print("### closed ###")

    def on_open(ws):
        def run(*args):
            d = {"common": wsParam.CommonArgs, "business": wsParam.BusinessArgs, "data": wsParam.Data}
            d = json.dumps(d)
            ws.send(d)
            if os.path.exists('./test.wav'):
                os.remove('./test.wav')
        thread.start_new_thread(run, ())

    websocket.enableTrace(False)
    ws = websocket.WebSocketApp(wsUrl, on_message=on_message, on_error=on_error, on_close=on_close)
    ws.on_open = on_open
    ws.run_forever(sslopt={"cert_reqs": ssl.CERT_NONE})