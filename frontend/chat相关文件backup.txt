sidebar2.vue

<template>
  <div class="custom-sidebar" :class="{ 'custom-sidebar--active': active }">
    <div class="custom-sidebar__content">
      <div class="custom-sidebar__header">
        <van-button plain type="primary" size="small" @click="createNewDialog">
          新建对话
        </van-button>
      </div>
      <van-divider />
      <div class="custom-sidebar__items">
        <div
          v-for="(item, index) in items"
          :key="index"
          class="custom-sidebar-item"
          :class="{ 'custom-sidebar-item--active': activeIndex === index }"
          @click.stop="selectItem(index)"
        >
          <van-icon name="bars"  size="18"/>
          <van-field
            v-if="isEditing[index]"
            :ref="(el) => editInput[index] = el"
            v-model="editText[index]"
            @keyup.enter="finishEdit(index)"
            autofocus
            class="edit-input"

          />
          <div v-if="!isEditing[index]" class="custom-sidebar-item__text">
            {{ item.title }}
          </div>
          
          <van-popover 
            v-model:show="popoverVisible[index]" 
            :actions="actions"
            @select="onSelectAction(index,$event)"
            >
            <template #reference>
              <van-icon
                  name="ellipsis"
                  size="16"
                  class="action-icon"
                />
            </template>
          </van-popover>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref,onMounted,onUnmounted,nextTick,watch,computed,watchEffect } from 'vue';

const props = defineProps({
  items: {
    type: Array,
    default: () => [],
  },
  modelValue: {
    type: Number,
    default: 0,
  },
});

const emit = defineEmits(['update:modelValue', 'createNewDialog','deleteDialog','renameDialog']);

const activeIndex = ref(props.modelValue);
const showActions = ref(false);
const selectedDialogIndex = ref(-1);


const actions = [
      { text: '删除', icon: 'delete-o' },
      { text: '重命名', icon: 'edit' },
    ];
const popoverVisible = ref(props.items.map(() => false)); // 为每个对话项维护一个 popoverVisible 状态
const isEditing = ref(props.items.map(() => false));
const editText = ref(props.items.map((item) => item.title));
const editInput = ref([]);

const isRenaming = ref(false);

watch(
  () => props.items,
  (newItems) => {
    isEditing.value = newItems.map(() => false);
    editText.value = newItems.map((item) => item.title);
    popoverVisible.value = newItems.map(() => false);
    editInput.value = newItems.map(() => null); // 初始化 editInput 数组
  },
  { deep: true, immediate: true }
);


const selectItem = (index) => {
  activeIndex.value = index;
  emit('update:modelValue', index);
};

const createNewDialog = () => {
  emit('createNewDialog');
};
const showDialogActions = (index) => {
  showActions.value = true;
  selectedDialogIndex.value = index;
};

const onSelectAction = (index,action) => {
  popoverVisible.value[index] = false; // 关闭当前对话项的 popover
  if (action.text === '删除') {
    emit('deleteDialog', index);
  } else if (action.text === '重命名') {
    isEditing.value[index] = true;
    isRenaming.value = true; // 设置标志变量
    console.log('action.text === 重命名,isEditing.value[index]=',index,isEditing.value[index])
    nextTick(() => {
      console.log('editInput.value[index]=',editInput.value[index])
      if(editInput.value[index]){
        editInput.value[index].focus();
      }
      setTimeout(()=>{
        isRenaming.value = false;
      },500)
    });
  }
};

const finishEdit = (index) => {
  console.log('调用finishEdit')
  isEditing.value[index] = false;
  if (editText.value[index].trim() !== '') {
    emit('renameDialog', index, editText.value[index]);
  } else {
    editText.value[index] = props.items[index].title;
  }
};

/* const handleClickOutside = (event) => {
  props.items.forEach((_, index) => {
    // if (isEditing.value[index] && editInput.value[index] && !editInput.value[index].$el.contains(event.target)) {
    //  finishEdit(index);
    //} 
    if (isEditing.value[index] && editInput.value[index] && editInput.value[index].$el) {
      if (!editInput.value[index].$el.contains(event.target)) {
        finishEdit(index);
      }
    }
  });
};
 */
const getEditInputRef = computed(() => {
  return (index) => editInput.value[index];
});

const handleClickOutside = (event) => {
  if (isRenaming.value) { // 检查标志变量
    return;
  }
  const target = event.target;
  console.log('target',target)
  const isEditingAny = isEditing.value.some((item) => item);
  console.log('isEditingAny',isEditingAny)
  if (isEditingAny) {

    nextTick(()=>{
      props.items.forEach((_, index) => {
        console.log('index',index)
        console.log('editInput.value',editInput.value)
        const editInputRef = editInput.value[index];
        //const editInputRef = getEditInputRef.value(index);
        console.log('editInputRef',editInputRef)
        if (isEditing.value[index] && editInputRef && editInputRef.$el) {
          console.log('isEditing.value[index]',isEditing.value[index])
          console.log('editInputRef.$el',editInputRef.$el)
          if (!editInputRef.$el.contains(target)) {
            console.log('editInputRef.$el.contains(target)',editInputRef.$el.contains(target))
            console.log('index',index)
            finishEdit(index);
          }
        }
      });  
    })
    
  }
};

watchEffect(() => {
  console.log("editInput.value的变化：", editInput.value);
});

onMounted(() => {
  document.addEventListener('click', handleClickOutside);
  setTimeout(()=>{
    console.log("延迟后editInput.value:",editInput.value);
  },2000)
});

onUnmounted(() => {
  document.removeEventListener('click', handleClickOutside);
});


defineExpose({
  activeIndex,
});

const active = ref(true); // 始终显示侧边栏
</script>

<style lang="less" scoped>
.custom-sidebar {
  position: absolute;
  top: 0;
  right: 0;
  width: 200px;
  height: 100vh;
  background-color: #fff;
  box-shadow: -2px 0 6px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease;
  transform: translateX(0);
  z-index: 100;
  display: flex;
  flex-direction: column;
}

.custom-sidebar--active {
  transform: translateX(0);
}

.custom-sidebar__content {
  display: flex;
  flex-direction: column;
  height: 100%;
}

.custom-sidebar__header {
  padding: 16px;
  display: flex; flex-direction: column;
  gap: 8px; /* 添加按钮之间的间距 */
}

.custom-sidebar__items {
  flex: 1;
  overflow-y: auto;
  display: flex; flex-direction: column;
}

.custom-sidebar-item {
  padding: 16px;
  font-size: 14px;
  color: #323233;
  cursor: pointer;
  border-bottom: 1px solid #eee;
  display: flex; flex-direction: row;
}

.custom-sidebar-item--active {
  background-color: #f0f0f0;
  font-weight: 500;
}

.custom-sidebar-item__text {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  line-height: inherit; // 继承父元素的行高
}

.action-icon {
  color: #999;
  cursor: pointer;
}

.edit-input {
  :deep(.van-field__control) {
    padding: 0; // 去除内边距
    height: 100%; // 设置高度为 100%
    font-size: inherit; // 继承父元素的字体大小
    line-height: inherit; // 继承父元素的行高
  }
  :deep(.van-field__body){
    height: auto;
  }
  :deep(.van-field__body--with-label){
    height: auto;
  } 
  :deep(.van-field__control:focus){
    border-bottom: 1px solid black;
  }
  :deep(.van-field__body--with-label .van-field__control){
    height: auto;
  }
} 

</style>




chatcomponent.vue
<template>
  <div class="chat-page">
    <van-nav-bar title="健康助手" left-arrow @click-left="onClickLeft" >
      <template #right>
        <van-icon name="bars"  size="18" @click="toggleSidebar"/>
      </template>
    </van-nav-bar>

    <Sidebar2
        :key="dialogs.length"
        :items="dialogs"
        v-model="activeDialogIndex"
        @createNewDialog="newDialog"
        @deleteDialog="handleDeleteDialog"
        @renameDialog="handleRenameDialog"
        v-show="isSidebarOpen"
        :style="{
        position: 'fixed',
        top: '46px', // 导航栏高度
        right: 0,
        height: 'calc(100vh - 46px)', // 剩余高度
        transform: isSidebarOpen ? 'translateX(0)' : 'translateX(100%)',
        transition: 'transform 0.3s ease',
      }"
      />

    <div class="chat-content">
      <div v-for="(message, index) in currentDialogMessages" :key="index" :class="message.role === 'user' ? 'user' : 'assistant'">
        <van-image v-if="message.role === 'assistant'" round width="30" height="30" :src="assistantAvatar" />
        <div class="message-bubble" :style="{ backgroundColor: message.role === 'user' ? '#333' : '#f0f0f0', color: message.role === 'user' ? 'white' : 'black' }">
          <div v-if="message.role === 'assistant'" v-html="renderedMarkdown(message.content)"></div>
          <div v-else>{{ message.content}}</div>
          <div class="message-time" v-if="message.time">{{ message.time }}</div>
        </div>
      </div>
      <div v-if="loading" class="loading-container">
        <van-loading type="spinner" />
        <span style="margin-left: 8px;">正在思考中...</span>
      </div>
    </div>
    <div class="chat-input">
      <van-field v-model="message" placeholder="Message..." />
      <!-- <van-icon name="send-o" @click="sendMessage"/> -->
      <van-button plain type="primary" @click="sendMessage">发送</van-button>
    </div>
   <!--  <van-popup v-model:show="showRenameDialog" position="center">
      <van-field v-model="renameDialogTitle" label="对话标题" placeholder="请输入新的对话标题" />
      <div style="padding: 16px;">
        <van-button type="primary" block @click="confirmRenameDialog">确认</van-button>
      </div>
    </van-popup> -->
  </div>
</template>

<script setup>
import { ref,onMounted,onUnmounted,reactive,getCurrentInstance,computed} from 'vue';
import { useRouter } from 'vue-router';
import io from 'socket.io-client';
import socket from '../utils/socketio.js'
import { marked } from 'marked';
import DOMPurify from 'dompurify';
import { showConfirmDialog } from 'vant';

const { proxy } = getCurrentInstance()
const router = useRouter();
const message = ref('');
const messages = ref([]);
const loading = ref(false); // 新增 loading 状态
//const socket = io('http://localhost:5000');
const assistantAvatar='/images/ai_avatar.png'

const loadHistory=async()=>{
  try {
    //const response = await axios.get('/api/history');
    const response = await api.loadHistory();
    messages.value = response.data.history;
  } catch (error) { 你
    console.error('Error fetching history:', error);
  }
}


onMounted(() => {
  socket.connect();
  socket.on('chat_response', (data) => {
    console.log('收到回复：', data);
    dialogs.value[activeDialogIndex.value].messages.push({ role: 'user', content: message.value });
    //messages.value.push({ role: 'assistant', content: data.content });
    loading.value = false;
  });
});
/* //http版本
const sendMessage = async() => {
  if (message.value.trim() !== '') {
    messages.value.push({ role: 'user', content: message.value });
    const response =await proxy.$api.chat({ role: 'user', content: message.value });
    //const responseData=response.json()
    console.log('response',response)
    messages.value.push({ role: 'assistant', content: response.data.content});
    //socket.emit('chat', { message: message.value });
    console.log('sendmessage success, messages are ',messages)
    message.value = '';
  }
}; */
//socketio版本
const sendMessage = async() => {
  if (message.value.trim() !== '') {
    //messages.value.push({ role: 'user', content: message.value });
    dialogs.value[activeDialogIndex.value].messages.push({ role: 'user', content: message.value });
    proxy.$api.sendUserMessage({ role: 'user', content: message.value });
    console.log({ role: 'user', content: message.value });//添加调试代码
    message.value = '';
    loading.value = true;

    //const response =await proxy.$api.chat({ role: 'user', content: message.value });
    //const responseData=response.json()
    /* console.log('response',response)
    messages.value.push({ role: 'assistant', content: response.data.content});
    //socket.emit('chat', { message: message.value });
    console.log('sendmessage success, messages are ',messages)
    message.value = ''; */
  }
};

onUnmounted(() => {
  // 组件卸载时关闭 WebSocket 连接
  socket.disconnect();
});

const renderedMarkdown = (markdown) => {
  const html = marked(markdown);
  return DOMPurify.sanitize(html);
};


//----------------------页头和侧边栏----------------------------
import Sidebar from './SideBar.vue'; // 导入侧边栏组件
import Sidebar2 from './SideBar2.vue'; // 导入侧边栏组件
const activeDialogIndex = ref(0);
const dialogs = ref([
  { 
    title: '对话 1', messages: [
      { role: 'user', content: '我的工作需要长时间坐着，如何保持正确的坐姿？' },
      { role: 'assistant', content: '请保持背部挺直，避免长时间低头，并定期起身活动。' }
    ] 
  },
  { 
    title: '对话 2', messages: [
      { role: 'user', content: '翘二郎腿有什么危害？' },
      { role: 'assistant', content: '翘二郎腿可能会导致脊柱侧弯' }
    ] 
  }
  ]);
const currentDialogMessages = computed(() => {
  if (dialogs.value[activeDialogIndex.value]) {
    return dialogs.value[activeDialogIndex.value].messages;
  }else{
    return [];
  }
});
const newDialog = () => {
  dialogs.value.push({ title: `对话 ${dialogs.value.length + 1}`, messages: [] });
  console.log('newdialog后activeDialogIndex:', activeDialogIndex.value); // 添加调试代码
};

const isSidebarOpen = ref(false);
const onClickLeft = () => {
  router.back();
};

const toggleSidebar = () => {
  isSidebarOpen.value = !isSidebarOpen.value;
};

/* const handleDeleteDialog = (index) => {
  const result=showConfirmDialog({
    title: '删除对话',
    message: '确定要删除该对话吗？',
  })
    .then(() => {
      // 用户点击确认，删除对话
      dialogs.value.splice(index, 1);
      // 如果删除的是当前选中的对话，则更新 activeDialogIndex
      if (activeDialogIndex.value === index) {
        activeDialogIndex.value = 0;
      } else if (activeDialogIndex.value > index) {
            // 如果删除的是当前选中对话之前的对话，则需要将 activeDialogIndex 减 1
            activeDialogIndex.value--;
        }
      console.log('dialogs after rename',dialogs)
      console.log('删除后activeDialogIndex:', activeDialogIndex.value); // 添加调试代码
    })
    .catch((action)=>{
      console.log('action',action)
    });
}; */

//16:45版本
const handleDeleteDialog = (index) => {
  showConfirmDialog({
    title: '删除对话',
    message: '确定要删除该对话吗？',
  })
    .then(() => {
      dialogs.value.splice(index, 1);

      if (activeDialogIndex.value === index) {
        activeDialogIndex.value = Math.max(0, dialogs.value.length - 1);
      } else if (activeDialogIndex.value > index) {
        activeDialogIndex.value--;
      }
      console.log('dialogs after delete', dialogs.value);
      console.log('删除后activeDialogIndex:', activeDialogIndex.value);
    })
    .catch((action) => {
      console.log('action', action);
    });
};
//重命名对话功能
const showRenameDialog = ref(false);
const renameDialogTitle = ref('');
const renameDialogIndex = ref(-1);


const handleRenameDialog = (index, newTitle) => {
  dialogs.value[index].title = newTitle;
  console.log('重命名后activeDialogIndex:', activeDialogIndex.value);
  console.log('重命名后dialogs:', dialogs.value);
};

const confirmRenameDialog = () => {
  if (renameDialogTitle.value.trim() !== '') {
    dialogs.value[renameDialogIndex.value].title = renameDialogTitle.value;
    showRenameDialog.value = false;
  } else {
    Toast('对话标题不能为空');
  }
};
 
</script>

<style lang="less" scoped>
  .chat-page {
  display: flex;
  flex-direction: column;
  height: 100vh;
}

.sidebar-button {
  position: absolute;
  top: 10px;
  right: 10px;
  cursor: pointer;
  font-size: 20px;
}
//---------------------侧边栏-------------------------
.sidebar {
  position: absolute;
  top: 0;
  right: -300px;
  width: 300px;
  height: 100vh;
  background-color: #f0f0f0;
  transition: right 0.3s ease;
  padding: 20px;
}

.sidebar-open {
  right: 0;
}

.search-bar {
  margin-bottom: 20px;
}

.search-bar input {
  width: 100%;
  padding: 10px;
}

.dialog-list {
  margin-bottom: 20px;
}

.dialog-item {
  display: flex;
  justify-content: space-between;
  padding: 10px;
  border-bottom: 1px solid #ccc;
}


//----------------------对话内容相关--------------------
.chat-content {
  flex: 1;
  padding: 16px;
  overflow-y: auto;
}

.user,
.assistant {
  display: flex;
  align-items: flex-start;
  margin-bottom: 8px;
}

.user {
  justify-content: flex-end;
}

.assistant {
  justify-content: flex-start;
}

.message-bubble {
  padding: 8px 12px;
  border-radius: 16px;
  max-width: 70%;
  word-wrap: break-word;
  margin: 0 8px;
}

.message-time {
  font-size: 12px;
  color: #999;
  margin-top: 4px;
}

.chat-input {
  display: flex;
  align-items: center;
  padding: 8px;
  border-top: 1px solid #eee;
}

.chat-input .van-field {
  flex: 1;
  margin-right: 8px;
}

/* 加载提示样式 */
.loading-container {
  position: absolute; /* 绝对定位 */
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%); /* 居中显示 */
  display: flex;
  align-items: center;
  color: #999;
}
</style>

